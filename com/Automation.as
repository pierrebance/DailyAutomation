package com{	import flash.filesystem.File;	import flash.net.FileReference;	import flash.display.MovieClip;	import flash.desktop.NativeApplication;	import flash.display.NativeWindow;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowType;	import flash.display.NativeWindowSystemChrome;	import flash.desktop.DockIcon;	import flash.events.InvokeEvent;	import flash.desktop.SystemTrayIcon;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NativeWindowDisplayStateEvent;	import flash.display.NativeWindowDisplayState;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.display.NativeMenuItem;	import flash.display.NativeMenu;	import flash.desktop.NotificationType;	import flash.desktop.Icon;	import flash.filesystem.FileStream;	import flash.filesystem.FileMode;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequestMethod;    import air.update.events.UpdateEvent;	import air.update.ApplicationUpdater;	import air.update.events.StatusFileUpdateEvent;	import air.update.events.StatusUpdateErrorEvent;	import air.update.events.StatusFileUpdateErrorEvent;	import air.update.events.DownloadErrorEvent;	import air.update.events.StatusUpdateEvent;	import air.update.events.UpdateEvent;	import flash.events.ErrorEvent;	import flash.events.MouseEvent;	import flash.desktop.NativeApplication;	import flash.display.NativeWindow;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowSystemChrome;	import flash.display.NativeWindowType;	import flash.display.StageScaleMode;	import flash.display.StageAlign;	import fl.controls.Button;	import Namespace;	import XML;	import flash.events.ProgressEvent;	import flash.utils.Dictionary;	import flash.utils.ByteArray;	import deng.fzip.FZip;	import deng.fzip.FZipEvent;	import deng.fzip.FZipFile;	import flash.events.IOErrorEvent;	import flash.system.Capabilities;		public class Automation extends MovieClip	{		private var adobeFolder:File;				private var vTemplates:Vector.<File>;		private var vCommands:Vector.<File>;				private var vListPackages:Vector.<String>;		private var vListPackagesSorted:Vector.<String>;				private var ico:Ico;				private var fd:FileDownloader;				private var showCommand:NativeMenuItem;		private var updateCommand:NativeMenuItem;		private var exitCommand:NativeMenuItem;				private var configXML:XML		private var baseUrl:String;		private var checkPeriodInSeconds:int;		private var prefixPackage:String;		private var extensionPackage:String;		private var phpScript:String;		private var currentVersion:Number;		private var numLevel:int = 3;		private var appUpdater:ApplicationUpdater;		private var descriptorUrl:String;		private var delay:Number;		private var tmpFolder:File;		private var mustDownLoadLastPackage:Boolean = false;		private var tmr:Timer;		private var tmrUpdateRestart:Timer;		var totalFilesSize:Number;		public function Automation():void		{			addEventListener(Event.ADDED_TO_STAGE, onAdded);		}				private function onAdded(e:Event):void{						removeEventListener(Event.ADDED_TO_STAGE, onAdded);						log_txt.htmlText = "";						InitStartup();			InitConfig();			InitDock();				InitPackageVersion();			SetApplicationDetails();			InitUpdate();						InitVisuals();					InitFolders();			CheckUpdate();		}				private function InitStartup():void{			try{				// Do not work in the Flash IDE				NativeApplication.nativeApplication.startAtLogin = true;			}			catch(e:Error){}		}				private function InitConfig():void{			var configFile:File = File.applicationDirectory.resolvePath( "Config.xml" );			var streamConfigFile:FileStream = new FileStream();			streamConfigFile.open( configFile, FileMode.READ ); 			configXML = new XML( streamConfigFile.readUTFBytes( streamConfigFile.bytesAvailable ));			streamConfigFile.close();						baseUrl = configXML.baseUrl[0][0];			checkPeriodInSeconds = int(configXML.checkPeriodInSeconds[0][0]);			prefixPackage = configXML.prefixPackage[0][0];			extensionPackage = configXML.extensionPackage[0][0];			phpScript = configXML.phpScript[0][0];			descriptorUrl = configXML.urlUpdate[0][0];			delay = Number(configXML.delayUpdate[0][0]);		}						private function InitPackageVersion():void{			var filePackageVersion:File = File.userDirectory.resolvePath("DailyAutomation.xml");						if(filePackageVersion.exists){				var streamPackageVersion:FileStream = new FileStream();				streamPackageVersion.open( filePackageVersion, FileMode.READ ); 				var packageVersionXML:XML = new XML( streamPackageVersion.readUTFBytes( streamPackageVersion.bytesAvailable ));				streamPackageVersion.close();				var packStr:String = packageVersionXML.packageVersion[0][0];				currentVersion = MakeVersionNumber(packStr, numLevel);				var packStr2:String = MakeVersionString(currentVersion, numLevel)				WriteLog(">> Installed package version : " + packStr2, 0, 16, true, "#0000FF");				lblPackage.text = "Current package version : " + packStr2;			}			else{				mustDownLoadLastPackage = true;				currentVersion = MakeVersionNumber("1.0.0", numLevel)				WriteLog(">> No package installed ..." , 0, 16, true, "#0000FF");				lblPackage.text = "Current package version : No package installed";			}		}				private function RegisterCurrentVersion():void{			var str:String = "";			var str2:String = MakeVersionString(currentVersion, numLevel);			str += "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n";			str += "<DailyAutomation>\r\n";			str += "\t<packageVersion>" + str2 + "</packageVersion>\r\n"			str += "</DailyAutomation>"						var filePackageVersion:File = File.userDirectory.resolvePath("DailyAutomation.xml")			if(filePackageVersion.exists){				filePackageVersion.deleteFile();			}						var fs:FileStream = new FileStream();			fs.open(filePackageVersion, FileMode.WRITE);			fs.writeUTFBytes(str);			fs.close();						lblPackage.text = "Current package version : " + str2;		}					private function MakeVersionNumber(str:String, maxLevel:int):Number{			var ar:Array = str.split(".");			var n:Number = 0;			for (var i:int = ar.length ; i <  maxLevel ; i++){				ar[i] = 0;			}			for (i = 0 ; i <  maxLevel ; i++){				var num:Number = ar[i] / 1000;				var pow:Number = 3 * (maxLevel - i);				n = n + Math.pow(10, pow) * num;			}			return n;		}				private function MakeVersionString(version:Number, maxLevel:int):String{			var strVersion:String = version.toString();			while(strVersion.length < 3 * maxLevel){				strVersion = "0" + strVersion;			}						var str:String = "";			var l:int = strVersion.length;			for (var i:int = 0 ; i <  maxLevel ; i++){				var temp:String = strVersion.substr(l - 3 * (i + 1), 3);				if(str == ""){					str = Number(temp).toString()				}else{					str = Number(temp).toString() + "." + str;				}			}			return str;		}				private function InitUpdate():void{			try			{				appUpdater = new ApplicationUpdater();				appUpdater.delay = delay;				appUpdater.updateURL = descriptorUrl;				appUpdater.addEventListener(StatusUpdateErrorEvent.UPDATE_ERROR, onStatusErrorHandler);				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onInitializeUpdate);  				appUpdater.addEventListener(ErrorEvent.ERROR, onUpdateError);				appUpdater.addEventListener(DownloadErrorEvent.DOWNLOAD_ERROR, onDownloadError)				appUpdater.initialize();			}catch(e:Error){				LogError(e);			}		}				private function onInitializeUpdate(evt:UpdateEvent):void{			evt.target.removeEventListener(UpdateEvent.INITIALIZED, onInitializeUpdate);			appUpdater.checkNow();		}				private function onStatusErrorHandler(evt:StatusUpdateErrorEvent):void{			evt.target.removeEventListener(ErrorEvent.ERROR, onUpdateError);			evt.target.removeEventListener(StatusUpdateErrorEvent.UPDATE_ERROR, onStatusErrorHandler);			evt.target.removeEventListener(DownloadErrorEvent.DOWNLOAD_ERROR, onDownloadError);						evt.preventDefault();						WriteLog("");			WriteLog("Status update error !", 0, 16, true, "#FF0000");			RestartUpdateProcess();		}				private function onDownloadError(evt:DownloadErrorEvent):void{			evt.target.removeEventListener(ErrorEvent.ERROR, onUpdateError);			evt.target.removeEventListener(StatusUpdateErrorEvent.UPDATE_ERROR, onStatusErrorHandler);			evt.target.removeEventListener(DownloadErrorEvent.DOWNLOAD_ERROR, onDownloadError);						evt.preventDefault();						WriteLog("");			WriteLog("Download error !", 0, 16, true, "#FF0000");			RestartUpdateProcess();		}		private function RestartUpdateProcess():void{			if(tmrUpdateRestart != null){				tmrUpdateRestart.stop();			}			tmrUpdateRestart = new Timer(1000 * 60 * 2, 1);			tmrUpdateRestart.addEventListener(TimerEvent.TIMER_COMPLETE, onRestartUpdateProcess);					}				private function onRestartUpdateProcess(evt:TimerEvent):void{			evt.target.removeEventListener(TimerEvent.TIMER_COMPLETE, onRestartUpdateProcess);			tmrUpdateRestart = null;						WriteLog("");			WriteLog(">> Restarting auto-update process ...", 0, 16, true, "#0000FF");						InitUpdate();		}				private function onUpdateError(evt:ErrorEvent):void{			evt.target.removeEventListener(ErrorEvent.ERROR, onUpdateError);			evt.target.removeEventListener(StatusUpdateErrorEvent.UPDATE_ERROR, onStatusErrorHandler);			evt.target.removeEventListener(DownloadErrorEvent.DOWNLOAD_ERROR, onDownloadError);						evt.preventDefault();						WriteLog("");			WriteLog("Status update error !", 0, 16, true, "#FF0000");						RestartUpdateProcess();					}				private function SetApplicationDetails():void {			var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;			var ns:Namespace = appXML.namespace();			lblVersion.text = MakeVersionString(MakeVersionNumber(appXML.ns::versionNumber, numLevel), numLevel);			lblName.text = appXML.ns::name;		}					private function InitVisuals():void{			ico = new Ico();		}				private function InitDock():void{			showCommand = new NativeMenuItem("Show");			updateCommand = new NativeMenuItem("Look for updates");			exitCommand = new NativeMenuItem("Exit");						if(NativeApplication.supportsDockIcon){				var dockIcon:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onUnDock);				dockIcon.menu = CreateIconMenu();			} else if (NativeApplication.supportsSystemTrayIcon){				var sysTrayIcon:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon;				sysTrayIcon.tooltip = "Automation";				sysTrayIcon.addEventListener(MouseEvent.CLICK, onUnDock);				sysTrayIcon.menu = CreateIconMenu();			}						stage.nativeWindow.addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, onMinimized);						var timer:Timer = new Timer(1000, 1);			timer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerMinimize);			timer.start();		}				private function onTimerMinimize(e:TimerEvent):void{			e.target.removeEventListener(TimerEvent.TIMER_COMPLETE, onTimerMinimize);			Dock()		}				private function onMinimized(e:NativeWindowDisplayStateEvent):void{			if(e.afterDisplayState == NativeWindowDisplayState.MINIMIZED){				e.preventDefault();				Dock();			}		}				private function Dock():void{			stage.nativeWindow.visible = false;			var bmpData:BitmapData = new BitmapData(ico.width, ico.height, true, 0x000000);			bmpData.draw( ico );			NativeApplication.nativeApplication.icon.bitmaps = [bmpData];		}				private function onUnDock(e:Event = null):void{			stage.nativeWindow.visible = true;			NativeApplication.nativeApplication.icon.bitmaps = [];		}				private function CreateIconMenu():NativeMenu{			var iconMenu:NativeMenu = new NativeMenu();						iconMenu.addItem(updateCommand);			updateCommand.addEventListener(Event.SELECT, onUpdateCommand);						if(NativeApplication.supportsSystemTrayIcon){				iconMenu.addItem(showCommand);				showCommand.addEventListener(Event.SELECT, onShowCommand);				iconMenu.addItem(exitCommand);				exitCommand.addEventListener(Event.SELECT, onExit);				}								return iconMenu;		}				private function onShowCommand(event:Event):void{			if(stage.nativeWindow.visible){				Dock();			} else {				onUnDock(null);			}		}				private function onExit(event:Event):void{			NativeApplication.nativeApplication.exit();		}				private function onUpdateCommand(event:Event):void{			if(updateCommand.enabled){				Notify();				onCheckPackage(null);			}		}				private function Notify():void{			if(NativeApplication.supportsDockIcon){				var dock:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;  				dock.bounce(NotificationType.CRITICAL);			} else if (NativeApplication.supportsSystemTrayIcon){				stage.nativeWindow.notifyUser(NotificationType.CRITICAL);			}		}				private function InitFolders():void{			WriteLog("");			WriteLog(">> Browsing Flash versions...", 0, 16, true, "#0000FF");			if (Capabilities.os.toLowerCase().indexOf('mac') != -1)			{				adobeFolder = File.userDirectory.resolvePath("Library/Application Support/Adobe");			}			else			{				adobeFolder = File.userDirectory.resolvePath("AppData/Local/Adobe");			}									vTemplates = new Vector.<File>();			vCommands = new Vector.<File>();						if (adobeFolder != null && adobeFolder.exists)			{				var adobeSubFolders:Array = adobeFolder.getDirectoryListing();				if (adobeSubFolders != null && adobeSubFolders.length > 0)				{					for (var i:int = 0; i < adobeSubFolders.length; i++)					{						if (adobeSubFolders[i].name.indexOf("Flash CS") > -1)						{							WriteLog("- " + adobeSubFolders[i].name, 1, 16, true);							CheckConfigurationFolders(adobeSubFolders[i].name);						}					}				}			}		}		private function CheckConfigurationFolders(version:String):void{			WriteLog(">> Checking configuration folders ...", 1, 14, true);			var theFlashVersion:File = adobeFolder.resolvePath(version);			var theFlashVersionLanguages:Array = theFlashVersion.getDirectoryListing();			if (theFlashVersionLanguages != null && theFlashVersionLanguages.length > 0)			{				for (var i:int = 0; i < theFlashVersionLanguages.length; i++)				{					WriteLog(">> Language : " + theFlashVersionLanguages[i].name , 2, 12, false);					var folderConfig:File = theFlashVersionLanguages[i].resolvePath("Configuration");					if (folderConfig.exists)					{						var folderTemplates:File = folderConfig.resolvePath("Templates");						var folderCommands:File = folderConfig.resolvePath("Commands");												if(folderTemplates.exists){							WriteLog("- Templates folder fond at :", 3, 12);							WriteLog(folderTemplates.nativePath, 4, 10, false, "#000000");							vTemplates.push(folderTemplates)													}else{							folderTemplates.createDirectory();							WriteLog(" - Templates folder created at :", 3, 12);							WriteLog(folderTemplates.nativePath, 4, 10, false, "#000000");							vTemplates.push(folderTemplates)							}												if(folderCommands.exists){							WriteLog("- Commands folder found at :", 3, 12);							WriteLog(folderCommands.nativePath, 4, 10, false, "#000000");							vCommands.push(folderCommands)													}					}				}			}		}				private function CheckUpdate():void{			btnPackage.addEventListener(MouseEvent.CLICK, onCheckPackage);			ListPackages();		}				private function onCheckPackage(evt:MouseEvent):void{						ClearTimerCheck();			ListPackages();		}				private function ListPackages():void{			btnPackage.enabled = false;			updateCommand.enabled = false;						WriteLog("");			WriteLog(">> Checking for updates ...", 0, 16, true, "#0000FF");			WriteLog("Listing available packages ...", 1, 14);			var req:URLRequest=new URLRequest(baseUrl + phpScript);			req.method=URLRequestMethod.POST;						var varReq:URLVariables = new URLVariables();			varReq.id=Math.round(1000000000*Math.random()).toString();			req.data = varReq;						var loader:URLLoader = new URLLoader(req);			loader.dataFormat = URLLoaderDataFormat.VARIABLES;			loader.addEventListener(Event.COMPLETE, onListPackages);    		loader.addEventListener(IOErrorEvent.IO_ERROR, onIOErrorListPackages);			loader.load(req);		}				private function onIOErrorListPackages(evt:IOErrorEvent):void {			evt.target.removeEventListener(IOErrorEvent.IO_ERROR, onIOErrorListPackages);			WriteLog("");			WriteLog("Error listing packages !", 0, 16, true, "#FF0000");									CheckAgain();		}				private function onListPackages(evt:Event):void {			evt.target.removeEventListener(Event.COMPLETE, onListPackages);			var res:URLVariables=new URLVariables(evt.target.data);						vListPackages = new Vector.<String>;						for each(var strPackage:String in res.packages.split("|")){				if(strPackage != ""){					WriteLog("- " + strPackage, 2, 12, false, "#000000");					vListPackages.push(strPackage);				}			}						vListPackagesSorted = vListPackages.sort(SortPackages);			var thePackage:String = vListPackagesSorted[0];			WriteLog("Latest package : ", 1, 14);			WriteLog(thePackage, 2, 12, false, "#000000");			var lastPackageVersionString:String = thePackage.substring(prefixPackage.length, thePackage.length - extensionPackage.length)			var lastPackageVersionNumber:Number = MakeVersionNumber(lastPackageVersionString, numLevel);						WriteLog("");						if(currentVersion < lastPackageVersionNumber || mustDownLoadLastPackage){				currentVersion = lastPackageVersionNumber;								DeletePrevious();				DownloadPackage(baseUrl + thePackage);			}else{				CheckAgain();			}		}				private function CheckAgain():void{						btnPackage.enabled = true;			updateCommand.enabled = true;						WriteLog("");			WriteLog(">> New server check in " + checkPeriodInSeconds + " seconds ..." , 0, 16, true, "#0000FF");							ClearTimerCheck();						tmr = new Timer(checkPeriodInSeconds * 1000, 1);			tmr.addEventListener(TimerEvent.TIMER_COMPLETE, onCheckAgain);			tmr.start();		}				private function ClearTimerCheck():void{			if(tmr != null){				tmr.stop();				if(tmr.hasEventListener(TimerEvent.TIMER_COMPLETE)){					tmr.removeEventListener(TimerEvent.TIMER_COMPLETE, onCheckAgain);				}			}		}					private function onCheckAgain(e:TimerEvent):void{			e.target.removeEventListener(TimerEvent.TIMER_COMPLETE, onCheckAgain);			ListPackages();		}				public function SortPackages(v1:String, v2:String):Number{			var version1:Number = MakeVersionNumber(v1.substring(prefixPackage.length, v1.length - extensionPackage.length),numLevel);			var version2:Number = MakeVersionNumber(v2.substring(prefixPackage.length, v2.length - extensionPackage.length),numLevel);			if (version1 >= version2)			{				return -1;			}			else			{				return 1;			}		}						private function DeletePrevious():void{			var f, file:File;			var arSub:Array;			WriteLog(">> Deleting previous package" , 0, 16, true, "#0000FF");			for each(f in vCommands){				arSub = f.getDirectoryListing();				for each(file in arSub){					if(file.name.indexOf("DAILY_") == 0){						if(file.isDirectory){							file.deleteDirectory(true);						}else{							file.deleteFile();						}					}				}			}						for each(f in vTemplates){				arSub = f.getDirectoryListing();				for each(file in arSub){					if(file.name.indexOf("DAILY_") == 0){						if(file.isDirectory){							file.deleteDirectory(true);						}else{							file.deleteFile();						}					}				}			}		}				private function DownloadPackage(packageUrl:String):void{			try{				WriteLog("");								if(mustDownLoadLastPackage){					WriteLog(">> Downloading latest package (first download)..." , 0, 16, true, "#0000FF");				}else{					WriteLog(">> Downloading latest package ..." , 0, 16, true, "#0000FF");				}				WriteLog("");												tmpFolder = new File(File.applicationStorageDirectory.nativePath + "/temp");				WriteLog(">> Temporary directory : ", 1, 14);				WriteLog(tmpFolder.nativePath, 2, 12, false, "#000000");				if(tmpFolder.exists){					WriteLog(">> Deleting temporary directory ..." , 1, 14);					tmpFolder.deleteDirectory(true);					WriteLog("Directory deleted" , 2, 12);				}				WriteLog(">> Creating temporary directory ..." , 1, 14);				tmpFolder.createDirectory();				WriteLog("Directory created" , 2, 12);							fd = new FileDownloader();				fd.addEventListener(Event.COMPLETE, onPackageDownloaded);												WriteLog(">> Downloading from :" , 1, 14);				WriteLog(packageUrl , 2, 12, false, "#000000");								fd.Start(packageUrl, tmpFolder, "package.zip");							}catch(e:Error){				LogError(e);			}		}				private function onPackageDownloaded(e:Event):void{			e.target.removeEventListener(Event.COMPLETE, onPackageDownloaded);			WriteLog("New package downloaded" , 2, 12);						UnzipFile(tmpFolder.resolvePath("package.zip"));		}				function UnzipFile(file:File):void{			WriteLog(">> Unzipping new package" , 1, 14);			WriteLog("Extrating files...:" , 2, 12);						var zipFileBytes:ByteArray = new ByteArray();			var fs:FileStream = new FileStream();			fs.open(file, FileMode.READ);			fs.readBytes(zipFileBytes);			fs.close();						var fzip:FZip = new FZip();			fzip.addEventListener(FZipEvent.FILE_LOADED, onFileLoaded);			fzip.addEventListener(Event.COMPLETE, onUnzipComplete);			fzip.loadBytes(zipFileBytes);		}				private function onFileLoaded(e:FZipEvent):void		{			var fzf:FZipFile = e.file;			if (fzf.sizeUncompressed == 0) 			{				return;			}						var fileData:Object = new Object();			fileData.name = fzf.filename;			fileData.compressedSize = fzf.sizeCompressed;			fileData.uncompressedSize = fzf.sizeUncompressed;			totalFilesSize += fzf.sizeUncompressed;			fileData.date = fzf.date;												var f:File = tmpFolder.resolvePath(fzf.filename);			var fs:FileStream = new FileStream();			fs.open(f, FileMode.WRITE);			fs.writeBytes(fzf.content);			fs.close();						WriteLog("- " + fzf.filename + " extracted to :" , 3, 12);			WriteLog(f.nativePath , 4, 10, false, "#000000");		}				private function onUnzipComplete(e:Event):void		{						e.target.removeEventListener(Event.COMPLETE, onUnzipComplete);			e.target.removeEventListener(FZipEvent.FILE_LOADED, onFileLoaded);						WriteLog("Unzipping completed" , 2, 12);						InstallPackage();			RegisterCurrentVersion();			DeleteTempFolder();			mustDownLoadLastPackage = false;			WriteLog("");			WriteLog(">> Package update completed !", 0, 16, true, "#00FF00");			CheckAgain();		}				private function InstallPackage():void{						WriteLog("");			WriteLog(">> Installing package ..." , 0, 16, true, "#0000FF");						var f, file, newFile:File;			var folderTemplates:File = tmpFolder.resolvePath("DAILY_templates");			var folderCommands:File = tmpFolder.resolvePath("DAILY_commands");						WriteLog(">> Commands ..." , 1, 14);			for each(f in vCommands){				for each(file in folderCommands.getDirectoryListing()){					if (file.nativePath.indexOf('.DS_Store') == -1)					{						WriteLog("Command :" , 2, 12);						WriteLog(file.nativePath , 3, 10, false, "#000000");						newFile = new File(f.nativePath + "/" + file.name);						file.copyTo(newFile);						WriteLog("copied to :" , 2, 12);						WriteLog(newFile.nativePath , 3, 10, false, "#000000");					}				}			}						WriteLog(">> Templates ..." , 1, 14);			for each(f in vTemplates){				newFile = new File(f.nativePath + "/" + folderTemplates.name)				WriteLog("Template folder :" , 2, 12);				WriteLog(folderTemplates.nativePath , 3, 10, false, "#000000");				folderTemplates.copyTo(newFile);				WriteLog("copied to :" , 2, 12);				WriteLog(newFile.nativePath , 3, 10, false, "#000000");			}		}				private function DeleteTempFolder():void{			WriteLog("");			WriteLog(">> Deleting temporary folder : " , 0, 16, true, "#0000FF");			WriteLog(tmpFolder.nativePath , 1, 14);			tmpFolder.deleteDirectory(true);		}				private function WriteLog(line:String, indent:int = 0,size:int = 12, bold:Boolean = false, clr:String = '#FFFFFF'):void{			while(indent > 0){				line = "  " + line;				indent--;			}			if(bold){				line = "<p><font color='" + clr + "' size='" + size + "'><b>" + line + "</b></font></p>";			}else{				line = "<p><font color='" + clr + "' size='" + size + "'>" + line + "</font></p>";			}			log_txt.htmlText += line;			scrollbar.update()		}				private function LogError(e:Error):void{			WriteLog("")			WriteLog("-----------------------");			WriteLog(" ERROR :" , 0, 16, true, "#FF0000");			WriteLog(" " + e.errorID , 1, 14, true, "#FF0000");			WriteLog(" " + e.name , 1, 14, true, "#FF0000");			WriteLog(" " + e.message , 1, 14, true, "#FF0000");			WriteLog("")			WriteLog(" " + e.getStackTrace() , 0, 12, true, "#FF0000");			WriteLog("-----------------------");			WriteLog("")		}	}}